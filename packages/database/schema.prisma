generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}


// Статус заказа аренды
enum RentStatusEnum {
  Placed
  Accepted
  Rejected
  During
  Completed
  Canceled
}

// Система единиц измерения
enum UnitTypeEnum {
  Driver
  Dispatcher
}


// Вид топлива
enum FuelTypeEnum {
  Gas
  Diesel
  Electric
  Hybrid
	Petrol
}


// Сервис кто предоставляет машины
model Rental {
  id                        Int        @id  @default(autoincrement())
  uuid                      String          @default(uuid()) @db.Uuid @unique
  name                      String          @db.VarChar(40)
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  unitType                  UnitType        @relation(fields: [unitTypeId], references: [id])
  unitTypeId                Int
  managers                  RentalManager[]
  vehicles                  Vehicle[]
}


// Менаджер и он же админ 
model RentalManager {
  id                        Int       @id  @default(autoincrement())
  uuid                      String         @default(uuid()) @db.Uuid @unique
  name                      String         @db.VarChar(50)
  email                     String         @db.VarChar(254) @unique
  password                  String
  active                    Boolean        @default(false)
  activationToken           String?        @db.Text
  activationTokenExpiration DateTime?
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  rental                    Rental         @relation(fields: [rentalId], references: [id])
  rentalId                  Int
}

// Модель вида единиц измерения и то что UnitType может относиться к нескольким Rental(заказам)
model UnitType {
  id                       Int       @id  @default(autoincrement())
  uuid                     String         @default(uuid()) @db.Uuid @unique
  name                     UnitTypeEnum
  rentals                  Rental[]
	createdAt                 DateTime       @default(now())
}

// Модель Вида топлива и то что FuelType может относиться к нескольким Vehicle(машинам)
model FuelType {
  id                       Int       @id  @default(autoincrement())
  uuid                     String         @default(uuid()) @db.Uuid @unique
  name                     FuelTypeEnum
  vehicles                 Vehicle[]
	createdAt                 DateTime      @default(now())
}

// Модель Машины 
model Vehicle {
  id                       Int       @id  @default(autoincrement())
  uuid                     String         @default(uuid()) @db.Uuid @unique
  brand                    String         @db.VarChar(30)
  model                    String         @db.VarChar(50)
  year                     Int
  description              String?
  mileage                  Int
  licensePlate             String         @db.VarChar(20)
  pricePerDay              Decimal        @db.Decimal
  name                     String         @db.VarChar(50)
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  fuelType                 FuelType       @relation(fields: [fuelTypeId], references: [id])
  fuelTypeId               Int
  rental                   Rental         @relation(fields: [rentalId], references: [id])
  rentalId                 Int
  vehicleEquipment         VehicleEquipment[]
  vehicleServices          VehicleService[]
  vehiclePhotos            VehiclePhoto[]
  rents                    Rent[]
}


//  Модель дополнительных элементов машины (к примеру кондиционер и т.д)
model VehicleEquipment {
  id                      Int       @id  @default(autoincrement())
  uuid                    String         @default(uuid()) @db.Uuid @unique
  key                     String         @db.VarChar(100)
  value                   String         @db.VarChar(100)
  vehicle                 Vehicle        @relation(fields: [vehicleId], references: [id])
  vehicleId               Int
}

// Модель обслуживания машины
model VehicleService {
  id                      Int       @id  @default(autoincrement())
  uuid                    String         @default(uuid()) @db.Uuid @unique
  startAt                 DateTime
  endAt                   DateTime
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  vehicle                 Vehicle        @relation(fields: [vehicleId], references: [id])
  vehicleId               Int
}

// Модель фото машины
model VehiclePhoto {
  id                     Int        @id  @default(autoincrement())
  uuid                   String          @default(uuid()) @db.Uuid @unique
  url                    String
  position               Int
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  vehicle                Vehicle         @relation(fields: [vehicleId], references: [id])
  vehicleId              Int
}

// Модель заказа т.е аренды
model Rent {
  id                     Int       @id  @default(autoincrement())
  uuid                   String         @default(uuid()) @db.Uuid @unique
  notes                  String
  status                 RentStatusEnum
  startAt                DateTime
  endAt                  DateTime
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  pickUp                 Location       @relation("pickUpLocation", fields: [pickUpId], references: [id])
  pickUpId               Int
  dropOff                Location       @relation("dropOffLocation", fields: [dropOffId], references: [id])
  dropOffId              Int    
  vehicle                Vehicle        @relation(fields: [vehicleId], references: [id])
  vehicleId              Int
  customer               Customer       @relation(fields: [customerId], references: [id])
  customerId             Int            @unique
}

// Клиент который оформил заказ
model Customer {
  id                     Int      @id  @default(autoincrement())
  uuid                   String        @default(uuid()) @db.Uuid @unique
  firstName              String        @db.VarChar(30)
  lastName               String        @db.VarChar(50)
  age                    Int      
  city                   String        @db.VarChar(70)  
  address                String        @db.VarChar(70)  
  zipCode                Int  
  email                  String        @db.VarChar(254) 
  phoneNumber            String        @db.VarChar(30)
  createdAt              DateTime      @default(now())
  rent                   Rent?
}

// Место полуения и сдачи машины
model Location {
  id                     Int      @id  @default(autoincrement())
  uuid                   String        @default(uuid()) @db.Uuid @unique
  city                   String
	pickUps                Rent[]        @relation("pickUpLocation")
  dropOffs               Rent[]        @relation("dropOffLocation")
	createdAt              DateTime      @default(now())      
}